import org.apache.spark.sql.SparkSession
import org.apache.log4j._
import org.apache.spark.ml.evaluation.ClusteringEvaluator

import org.apache.spark.ml.clustering.KMeans

Logger.getLogger("org").setLevel(Level.ERROR)

val spark = SparkSession.builder().getOrCreate()

val dataset = spark.read.format("libsvm").option("numFeatures" , "3").load("sample_kmeans_data.txt")
//val data = spark.read.option("header","true").option("inferSchema","true").csv("sample_kmeans_data.txt")

val kmeans = new KMeans().setK(2).setSeed(1L)

val model = kmeans.fit(dataset)

// val WSSSE = model.summary.trainingCost
// println(s"within set sum of square errors = $WSSSE")

// Make predictions
val predictions = model.transform(dataset)

// Evaluate clustering by computing Silhouette score
val evaluator = new ClusteringEvaluator()

val silhouette = evaluator.evaluate(predictions)
println(s"Silhouette with squared euclidean distance = $silhouette")

// Shows the result.
println("Cluster Centers: ")
model.clusterCenters.foreach(println)