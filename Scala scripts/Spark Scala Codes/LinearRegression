import org.apache.spark.sql.SparkSession
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.sql.functions._
import org.apache.log4j._
//import org.apache.spark.SparkContext
//error message on the screens
Logger.getLogger("org").setLevel(Level.ERROR)

val spark = SparkSession.builder().getOrCreate()

//val data = spark.read.format("csv").option("header" , "true").option("InferSchema" , "true").csv("Clean_Ecommerce.csv")
val data = spark.read.format("csv").option("header" , "true").option("InferSchema" , "true").load("Clean_USA_Housing.csv")

data.printSchema()
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.linalg.Vectors
//print("passed!")

  
// val df = spark.createDataFrame(spark.sparkContext.parallelize(data),simpleSchema)
//val toDouble = udf[Double , String](_.toDouble)
//val data2 = data.withColumn("Avg Area Income" ,data("Avg Area Income").toDouble).withColumn("Avg Area House Age" ,data("Avg Area House Age").toDouble).withColumn("Avg Area Number of Rooms" ,data("Avg Area Number of Rooms").toDouble).withColumn("Avg Area Number of Bedrooms" ,data("Avg Area Number of Bedrooms" ).toDouble).withColumn("Area Population" ,data("Area Population").toDouble)

//data2.printSchema()

// val colnames = data.columns
// val firstrow = data.head(1)(0)

// println("\n")
// println("example data row")

// for(ind <- Range(1,colnames.length)){
// println(colnames(ind))
// println(firstrow(ind))
// println("\n")}

//val data2 = data.withColumnRenamed("Price" , "labelColumn")

val df = data.select(data("Price").as("label") , $"Avg Area Income" , $"Avg Area House Age" , $"Avg Area Number of Rooms" , $"Avg Area Number of Bedrooms" , $"Area Population")
df.printSchema()
df.show(3)

val assembler = new VectorAssembler().setInputCols(Array("Avg Area Income" , "Avg Area House Age" , "Avg Area Number of Rooms" , "Avg Area Number of Bedrooms" , "Area Population")).setOutputCol("features")

val output = assembler.transform(df).select($"label" , $"features")
output.show(3)

val lr = new LinearRegression()
val lrmodel = lr.fit(output)
val trainingSummary = lrmodel.summary
trainingSummary.residuals.show(3)

println(s"numIterations: ${trainingSummary.totalIterations}")
println(s"objectiveHistory: ${trainingSummary.objectiveHistory.toList}")


println(s"RMSE: ${trainingSummary.rootMeanSquaredError}")
println(s"MSE: ${trainingSummary.meanSquaredError}")
println(s"r2: ${trainingSummary.r2}")